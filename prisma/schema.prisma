//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _global.prisma
//

// prisma/schemas/_global.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//
// ideation.prisma
//

// prisma/schemas/ideation.prisma

model Idea {
  id                   Int        @id @default(autoincrement())
  title                String
  description          String
  type                 IdeaType
  status               IdeaStatus
  potentialDollarValue Int?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  authorId             Int
  author               User       @relation(fields: [authorId], references: [id])
  subIdeas             SubIdea[]
  totalProposals       Int        @default(0)
  totalPrototypes      Int        @default(0)
}

model SubIdea {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  status      SubIdeaStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    Int
  author      User          @relation(fields: [authorId], references: [id])
  ideaId      Int
  idea        Idea          @relation(fields: [ideaId], references: [id])
  proposals   Proposal[]
  votes       Vote[]
  comments    Comment[]
}

model Proposal {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  presentationUrl String?
  status          ProposalStatus @default(PENDING)
  rejectionReason String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  authorId        Int
  author          User           @relation(fields: [authorId], references: [id])
  subIdeaId       Int
  subIdea         SubIdea        @relation(fields: [subIdeaId], references: [id])
  prototypes      Prototype[]
  votes           Vote[]
}

model Prototype {
  id          Int                   @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  liveUrl     String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  authorId    Int
  author      User                  @relation("PrototypeAuthor", fields: [authorId], references: [id])
  proposalId  Int
  proposal    Proposal              @relation(fields: [proposalId], references: [id])
  team        PrototypeTeamMember[]
  votes       Vote[]
  comments    Comment[]
}

model PrototypeTeamMember {
  prototypeId Int
  prototype   Prototype @relation(fields: [prototypeId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  assignedAt  DateTime  @default(now())

  @@id([prototypeId, userId])
}

model Vote {
  id          Int        @id @default(autoincrement())
  value       Int
  createdAt   DateTime   @default(now())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  subIdeaId   Int?
  subIdea     SubIdea?   @relation(fields: [subIdeaId], references: [id])
  proposalId  Int?
  proposal    Proposal?  @relation(fields: [proposalId], references: [id])
  prototypeId Int?
  prototype   Prototype? @relation(fields: [prototypeId], references: [id])

  @@unique([userId, subIdeaId])
  @@unique([userId, proposalId])
  @@unique([userId, prototypeId])
}

model Comment {
  id          Int        @id @default(autoincrement())
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    Int
  author      User       @relation(fields: [authorId], references: [id])
  subIdeaId   Int?
  subIdea     SubIdea?   @relation(fields: [subIdeaId], references: [id])
  prototypeId Int?
  prototype   Prototype? @relation(fields: [prototypeId], references: [id])

  // Add these fields for nested replies:
  parentCommentId Int?
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
}

enum IdeaStatus {
  OPEN
  CLOSED
}

// Ensure each enum is a complete block
enum IdeaType {
  IDEATION
  SOLUTION_REQUEST
}

enum SubIdeaStatus {
  OPEN_FOR_PROTOTYPING
  SELF_PROTOTYPING
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

//
// users.prisma
//

// prisma/schemas/user.prisma

model User {
  id                 Int                   @id @default(autoincrement())
  name               String
  email              String                @unique
  password           String
  avatarUrl          String?
  role               UserRole              @default(USER)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  ideas              Idea[]
  subIdeas           SubIdea[]
  proposals          Proposal[]
  authoredPrototypes Prototype[]           @relation("PrototypeAuthor")
  teamMemberships    PrototypeTeamMember[]
  votes              Vote[]
  comments           Comment[]
}

enum UserRole {
  USER
  ADMIN
}
